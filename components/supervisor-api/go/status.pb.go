// Code generated by protoc-gen-go. DO NOT EDIT.
// source: status.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContentSource int32

const (
	ContentSource_from_other    ContentSource = 0
	ContentSource_from_backup   ContentSource = 1
	ContentSource_from_prebuild ContentSource = 2
)

var ContentSource_name = map[int32]string{
	0: "from_other",
	1: "from_backup",
	2: "from_prebuild",
}

var ContentSource_value = map[string]int32{
	"from_other":    0,
	"from_backup":   1,
	"from_prebuild": 2,
}

func (x ContentSource) String() string {
	return proto.EnumName(ContentSource_name, int32(x))
}

func (ContentSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{0}
}

type TaskState int32

const (
	TaskState_opening TaskState = 0
	TaskState_running TaskState = 1
	TaskState_closed  TaskState = 2
)

var TaskState_name = map[int32]string{
	0: "opening",
	1: "running",
	2: "closed",
}

var TaskState_value = map[string]int32{
	"opening": 0,
	"running": 1,
	"closed":  2,
}

func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}

func (TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{1}
}

type PortsStatus_ExposedPortInfo_OnPortExposed int32

const (
	PortsStatus_ExposedPortInfo_ignore         PortsStatus_ExposedPortInfo_OnPortExposed = 0
	PortsStatus_ExposedPortInfo_open_browser   PortsStatus_ExposedPortInfo_OnPortExposed = 1
	PortsStatus_ExposedPortInfo_open_preview   PortsStatus_ExposedPortInfo_OnPortExposed = 2
	PortsStatus_ExposedPortInfo_notify         PortsStatus_ExposedPortInfo_OnPortExposed = 3
	PortsStatus_ExposedPortInfo_notify_private PortsStatus_ExposedPortInfo_OnPortExposed = 4
)

var PortsStatus_ExposedPortInfo_OnPortExposed_name = map[int32]string{
	0: "ignore",
	1: "open_browser",
	2: "open_preview",
	3: "notify",
	4: "notify_private",
}

var PortsStatus_ExposedPortInfo_OnPortExposed_value = map[string]int32{
	"ignore":         0,
	"open_browser":   1,
	"open_preview":   2,
	"notify":         3,
	"notify_private": 4,
}

func (x PortsStatus_ExposedPortInfo_OnPortExposed) String() string {
	return proto.EnumName(PortsStatus_ExposedPortInfo_OnPortExposed_name, int32(x))
}

func (PortsStatus_ExposedPortInfo_OnPortExposed) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{10, 0, 0}
}

type SupervisorStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SupervisorStatusRequest) Reset()         { *m = SupervisorStatusRequest{} }
func (m *SupervisorStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SupervisorStatusRequest) ProtoMessage()    {}
func (*SupervisorStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{0}
}

func (m *SupervisorStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SupervisorStatusRequest.Unmarshal(m, b)
}
func (m *SupervisorStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SupervisorStatusRequest.Marshal(b, m, deterministic)
}
func (m *SupervisorStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupervisorStatusRequest.Merge(m, src)
}
func (m *SupervisorStatusRequest) XXX_Size() int {
	return xxx_messageInfo_SupervisorStatusRequest.Size(m)
}
func (m *SupervisorStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SupervisorStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SupervisorStatusRequest proto.InternalMessageInfo

type SupervisorStatusResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SupervisorStatusResponse) Reset()         { *m = SupervisorStatusResponse{} }
func (m *SupervisorStatusResponse) String() string { return proto.CompactTextString(m) }
func (*SupervisorStatusResponse) ProtoMessage()    {}
func (*SupervisorStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{1}
}

func (m *SupervisorStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SupervisorStatusResponse.Unmarshal(m, b)
}
func (m *SupervisorStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SupervisorStatusResponse.Marshal(b, m, deterministic)
}
func (m *SupervisorStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupervisorStatusResponse.Merge(m, src)
}
func (m *SupervisorStatusResponse) XXX_Size() int {
	return xxx_messageInfo_SupervisorStatusResponse.Size(m)
}
func (m *SupervisorStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SupervisorStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SupervisorStatusResponse proto.InternalMessageInfo

func (m *SupervisorStatusResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type IDEStatusRequest struct {
	// if true this request will return either when it times out or when the workspace IDE
	// has become available.
	Wait                 bool     `protobuf:"varint,1,opt,name=wait,proto3" json:"wait,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDEStatusRequest) Reset()         { *m = IDEStatusRequest{} }
func (m *IDEStatusRequest) String() string { return proto.CompactTextString(m) }
func (*IDEStatusRequest) ProtoMessage()    {}
func (*IDEStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{2}
}

func (m *IDEStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDEStatusRequest.Unmarshal(m, b)
}
func (m *IDEStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDEStatusRequest.Marshal(b, m, deterministic)
}
func (m *IDEStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDEStatusRequest.Merge(m, src)
}
func (m *IDEStatusRequest) XXX_Size() int {
	return xxx_messageInfo_IDEStatusRequest.Size(m)
}
func (m *IDEStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IDEStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IDEStatusRequest proto.InternalMessageInfo

func (m *IDEStatusRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

type IDEStatusResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDEStatusResponse) Reset()         { *m = IDEStatusResponse{} }
func (m *IDEStatusResponse) String() string { return proto.CompactTextString(m) }
func (*IDEStatusResponse) ProtoMessage()    {}
func (*IDEStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{3}
}

func (m *IDEStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDEStatusResponse.Unmarshal(m, b)
}
func (m *IDEStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDEStatusResponse.Marshal(b, m, deterministic)
}
func (m *IDEStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDEStatusResponse.Merge(m, src)
}
func (m *IDEStatusResponse) XXX_Size() int {
	return xxx_messageInfo_IDEStatusResponse.Size(m)
}
func (m *IDEStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IDEStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IDEStatusResponse proto.InternalMessageInfo

func (m *IDEStatusResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ContentStatusRequest struct {
	// if true this request will return either when it times out or when the workspace content
	// has become available.
	Wait                 bool     `protobuf:"varint,1,opt,name=wait,proto3" json:"wait,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentStatusRequest) Reset()         { *m = ContentStatusRequest{} }
func (m *ContentStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ContentStatusRequest) ProtoMessage()    {}
func (*ContentStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{4}
}

func (m *ContentStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentStatusRequest.Unmarshal(m, b)
}
func (m *ContentStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentStatusRequest.Marshal(b, m, deterministic)
}
func (m *ContentStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentStatusRequest.Merge(m, src)
}
func (m *ContentStatusRequest) XXX_Size() int {
	return xxx_messageInfo_ContentStatusRequest.Size(m)
}
func (m *ContentStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContentStatusRequest proto.InternalMessageInfo

func (m *ContentStatusRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

type ContentStatusResponse struct {
	// true if the workspace content is available
	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	// source indicates where the workspace content came from
	Source               ContentSource `protobuf:"varint,2,opt,name=source,proto3,enum=supervisor.ContentSource" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ContentStatusResponse) Reset()         { *m = ContentStatusResponse{} }
func (m *ContentStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ContentStatusResponse) ProtoMessage()    {}
func (*ContentStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{5}
}

func (m *ContentStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentStatusResponse.Unmarshal(m, b)
}
func (m *ContentStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentStatusResponse.Marshal(b, m, deterministic)
}
func (m *ContentStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentStatusResponse.Merge(m, src)
}
func (m *ContentStatusResponse) XXX_Size() int {
	return xxx_messageInfo_ContentStatusResponse.Size(m)
}
func (m *ContentStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContentStatusResponse proto.InternalMessageInfo

func (m *ContentStatusResponse) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *ContentStatusResponse) GetSource() ContentSource {
	if m != nil {
		return m.Source
	}
	return ContentSource_from_other
}

type BackupStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackupStatusRequest) Reset()         { *m = BackupStatusRequest{} }
func (m *BackupStatusRequest) String() string { return proto.CompactTextString(m) }
func (*BackupStatusRequest) ProtoMessage()    {}
func (*BackupStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{6}
}

func (m *BackupStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackupStatusRequest.Unmarshal(m, b)
}
func (m *BackupStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackupStatusRequest.Marshal(b, m, deterministic)
}
func (m *BackupStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupStatusRequest.Merge(m, src)
}
func (m *BackupStatusRequest) XXX_Size() int {
	return xxx_messageInfo_BackupStatusRequest.Size(m)
}
func (m *BackupStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupStatusRequest proto.InternalMessageInfo

type BackupStatusResponse struct {
	CanaryAvailable      bool     `protobuf:"varint,1,opt,name=canary_available,json=canaryAvailable,proto3" json:"canary_available,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackupStatusResponse) Reset()         { *m = BackupStatusResponse{} }
func (m *BackupStatusResponse) String() string { return proto.CompactTextString(m) }
func (*BackupStatusResponse) ProtoMessage()    {}
func (*BackupStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{7}
}

func (m *BackupStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackupStatusResponse.Unmarshal(m, b)
}
func (m *BackupStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackupStatusResponse.Marshal(b, m, deterministic)
}
func (m *BackupStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupStatusResponse.Merge(m, src)
}
func (m *BackupStatusResponse) XXX_Size() int {
	return xxx_messageInfo_BackupStatusResponse.Size(m)
}
func (m *BackupStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupStatusResponse proto.InternalMessageInfo

func (m *BackupStatusResponse) GetCanaryAvailable() bool {
	if m != nil {
		return m.CanaryAvailable
	}
	return false
}

type PortsStatusRequest struct {
	// if observe is true, we'll return a stream of changes rather than just the
	// current state of affairs.
	Observe              bool     `protobuf:"varint,1,opt,name=observe,proto3" json:"observe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortsStatusRequest) Reset()         { *m = PortsStatusRequest{} }
func (m *PortsStatusRequest) String() string { return proto.CompactTextString(m) }
func (*PortsStatusRequest) ProtoMessage()    {}
func (*PortsStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{8}
}

func (m *PortsStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortsStatusRequest.Unmarshal(m, b)
}
func (m *PortsStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortsStatusRequest.Marshal(b, m, deterministic)
}
func (m *PortsStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortsStatusRequest.Merge(m, src)
}
func (m *PortsStatusRequest) XXX_Size() int {
	return xxx_messageInfo_PortsStatusRequest.Size(m)
}
func (m *PortsStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PortsStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PortsStatusRequest proto.InternalMessageInfo

func (m *PortsStatusRequest) GetObserve() bool {
	if m != nil {
		return m.Observe
	}
	return false
}

type PortsStatusResponse struct {
	Added                []*PortsStatus `protobuf:"bytes,1,rep,name=added,proto3" json:"added,omitempty"`
	Updated              []*PortsStatus `protobuf:"bytes,2,rep,name=updated,proto3" json:"updated,omitempty"`
	Removed              []uint32       `protobuf:"varint,3,rep,packed,name=removed,proto3" json:"removed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PortsStatusResponse) Reset()         { *m = PortsStatusResponse{} }
func (m *PortsStatusResponse) String() string { return proto.CompactTextString(m) }
func (*PortsStatusResponse) ProtoMessage()    {}
func (*PortsStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{9}
}

func (m *PortsStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortsStatusResponse.Unmarshal(m, b)
}
func (m *PortsStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortsStatusResponse.Marshal(b, m, deterministic)
}
func (m *PortsStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortsStatusResponse.Merge(m, src)
}
func (m *PortsStatusResponse) XXX_Size() int {
	return xxx_messageInfo_PortsStatusResponse.Size(m)
}
func (m *PortsStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PortsStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PortsStatusResponse proto.InternalMessageInfo

func (m *PortsStatusResponse) GetAdded() []*PortsStatus {
	if m != nil {
		return m.Added
	}
	return nil
}

func (m *PortsStatusResponse) GetUpdated() []*PortsStatus {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *PortsStatusResponse) GetRemoved() []uint32 {
	if m != nil {
		return m.Removed
	}
	return nil
}

type PortsStatus struct {
	// local_port is the port a service actually bound to. Some services bind
	// to localhost:<port>, in which case they cannot be made accessible from
	// outside the container. To help with this, supervisor then starts a proxy
	// that forwards traffic to this local port. In those cases, global_port
	// contains the port where the proxy is listening on.
	LocalPort  uint32 `protobuf:"varint,1,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	GlobalPort uint32 `protobuf:"varint,2,opt,name=global_port,json=globalPort,proto3" json:"global_port,omitempty"`
	// served is true if there is a process in the workspace that serves this port.
	Served bool `protobuf:"varint,4,opt,name=served,proto3" json:"served,omitempty"`
	// Exposed provides information when a port is exposed. If this field isn't set,
	// the port is not available from outside the workspace (i.e. the internet).
	Exposed              *PortsStatus_ExposedPortInfo `protobuf:"bytes,5,opt,name=exposed,proto3" json:"exposed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PortsStatus) Reset()         { *m = PortsStatus{} }
func (m *PortsStatus) String() string { return proto.CompactTextString(m) }
func (*PortsStatus) ProtoMessage()    {}
func (*PortsStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{10}
}

func (m *PortsStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortsStatus.Unmarshal(m, b)
}
func (m *PortsStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortsStatus.Marshal(b, m, deterministic)
}
func (m *PortsStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortsStatus.Merge(m, src)
}
func (m *PortsStatus) XXX_Size() int {
	return xxx_messageInfo_PortsStatus.Size(m)
}
func (m *PortsStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PortsStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PortsStatus proto.InternalMessageInfo

func (m *PortsStatus) GetLocalPort() uint32 {
	if m != nil {
		return m.LocalPort
	}
	return 0
}

func (m *PortsStatus) GetGlobalPort() uint32 {
	if m != nil {
		return m.GlobalPort
	}
	return 0
}

func (m *PortsStatus) GetServed() bool {
	if m != nil {
		return m.Served
	}
	return false
}

func (m *PortsStatus) GetExposed() *PortsStatus_ExposedPortInfo {
	if m != nil {
		return m.Exposed
	}
	return nil
}

type PortsStatus_ExposedPortInfo struct {
	// public determines if the port is available without authentication or not
	Public bool `protobuf:"varint,1,opt,name=public,proto3" json:"public,omitempty"`
	// url is the URL at which the port is available
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// action hint on expose
	OnExposed            PortsStatus_ExposedPortInfo_OnPortExposed `protobuf:"varint,3,opt,name=on_exposed,json=onExposed,proto3,enum=supervisor.PortsStatus_ExposedPortInfo_OnPortExposed" json:"on_exposed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *PortsStatus_ExposedPortInfo) Reset()         { *m = PortsStatus_ExposedPortInfo{} }
func (m *PortsStatus_ExposedPortInfo) String() string { return proto.CompactTextString(m) }
func (*PortsStatus_ExposedPortInfo) ProtoMessage()    {}
func (*PortsStatus_ExposedPortInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{10, 0}
}

func (m *PortsStatus_ExposedPortInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortsStatus_ExposedPortInfo.Unmarshal(m, b)
}
func (m *PortsStatus_ExposedPortInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortsStatus_ExposedPortInfo.Marshal(b, m, deterministic)
}
func (m *PortsStatus_ExposedPortInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortsStatus_ExposedPortInfo.Merge(m, src)
}
func (m *PortsStatus_ExposedPortInfo) XXX_Size() int {
	return xxx_messageInfo_PortsStatus_ExposedPortInfo.Size(m)
}
func (m *PortsStatus_ExposedPortInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PortsStatus_ExposedPortInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PortsStatus_ExposedPortInfo proto.InternalMessageInfo

func (m *PortsStatus_ExposedPortInfo) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *PortsStatus_ExposedPortInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PortsStatus_ExposedPortInfo) GetOnExposed() PortsStatus_ExposedPortInfo_OnPortExposed {
	if m != nil {
		return m.OnExposed
	}
	return PortsStatus_ExposedPortInfo_ignore
}

type TasksStatusRequest struct {
	// if observe is true, we'll return a stream of changes rather than just the
	// current state of affairs.
	Observe              bool     `protobuf:"varint,1,opt,name=observe,proto3" json:"observe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TasksStatusRequest) Reset()         { *m = TasksStatusRequest{} }
func (m *TasksStatusRequest) String() string { return proto.CompactTextString(m) }
func (*TasksStatusRequest) ProtoMessage()    {}
func (*TasksStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{11}
}

func (m *TasksStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TasksStatusRequest.Unmarshal(m, b)
}
func (m *TasksStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TasksStatusRequest.Marshal(b, m, deterministic)
}
func (m *TasksStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TasksStatusRequest.Merge(m, src)
}
func (m *TasksStatusRequest) XXX_Size() int {
	return xxx_messageInfo_TasksStatusRequest.Size(m)
}
func (m *TasksStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TasksStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TasksStatusRequest proto.InternalMessageInfo

func (m *TasksStatusRequest) GetObserve() bool {
	if m != nil {
		return m.Observe
	}
	return false
}

type TasksStatusResponse struct {
	Tasks                []*TaskStatus `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TasksStatusResponse) Reset()         { *m = TasksStatusResponse{} }
func (m *TasksStatusResponse) String() string { return proto.CompactTextString(m) }
func (*TasksStatusResponse) ProtoMessage()    {}
func (*TasksStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{12}
}

func (m *TasksStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TasksStatusResponse.Unmarshal(m, b)
}
func (m *TasksStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TasksStatusResponse.Marshal(b, m, deterministic)
}
func (m *TasksStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TasksStatusResponse.Merge(m, src)
}
func (m *TasksStatusResponse) XXX_Size() int {
	return xxx_messageInfo_TasksStatusResponse.Size(m)
}
func (m *TasksStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TasksStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TasksStatusResponse proto.InternalMessageInfo

func (m *TasksStatusResponse) GetTasks() []*TaskStatus {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type TaskStatus struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State                TaskState         `protobuf:"varint,2,opt,name=state,proto3,enum=supervisor.TaskState" json:"state,omitempty"`
	Terminal             string            `protobuf:"bytes,3,opt,name=terminal,proto3" json:"terminal,omitempty"`
	Presentation         *TaskPresentation `protobuf:"bytes,4,opt,name=presentation,proto3" json:"presentation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TaskStatus) Reset()         { *m = TaskStatus{} }
func (m *TaskStatus) String() string { return proto.CompactTextString(m) }
func (*TaskStatus) ProtoMessage()    {}
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{13}
}

func (m *TaskStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskStatus.Unmarshal(m, b)
}
func (m *TaskStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskStatus.Marshal(b, m, deterministic)
}
func (m *TaskStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStatus.Merge(m, src)
}
func (m *TaskStatus) XXX_Size() int {
	return xxx_messageInfo_TaskStatus.Size(m)
}
func (m *TaskStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStatus proto.InternalMessageInfo

func (m *TaskStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskStatus) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_opening
}

func (m *TaskStatus) GetTerminal() string {
	if m != nil {
		return m.Terminal
	}
	return ""
}

func (m *TaskStatus) GetPresentation() *TaskPresentation {
	if m != nil {
		return m.Presentation
	}
	return nil
}

type TaskPresentation struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OpenIn               string   `protobuf:"bytes,2,opt,name=open_in,json=openIn,proto3" json:"open_in,omitempty"`
	OpenMode             string   `protobuf:"bytes,3,opt,name=open_mode,json=openMode,proto3" json:"open_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskPresentation) Reset()         { *m = TaskPresentation{} }
func (m *TaskPresentation) String() string { return proto.CompactTextString(m) }
func (*TaskPresentation) ProtoMessage()    {}
func (*TaskPresentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{14}
}

func (m *TaskPresentation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPresentation.Unmarshal(m, b)
}
func (m *TaskPresentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPresentation.Marshal(b, m, deterministic)
}
func (m *TaskPresentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPresentation.Merge(m, src)
}
func (m *TaskPresentation) XXX_Size() int {
	return xxx_messageInfo_TaskPresentation.Size(m)
}
func (m *TaskPresentation) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPresentation.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPresentation proto.InternalMessageInfo

func (m *TaskPresentation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskPresentation) GetOpenIn() string {
	if m != nil {
		return m.OpenIn
	}
	return ""
}

func (m *TaskPresentation) GetOpenMode() string {
	if m != nil {
		return m.OpenMode
	}
	return ""
}

func init() {
	proto.RegisterEnum("supervisor.ContentSource", ContentSource_name, ContentSource_value)
	proto.RegisterEnum("supervisor.TaskState", TaskState_name, TaskState_value)
	proto.RegisterEnum("supervisor.PortsStatus_ExposedPortInfo_OnPortExposed", PortsStatus_ExposedPortInfo_OnPortExposed_name, PortsStatus_ExposedPortInfo_OnPortExposed_value)
	proto.RegisterType((*SupervisorStatusRequest)(nil), "supervisor.SupervisorStatusRequest")
	proto.RegisterType((*SupervisorStatusResponse)(nil), "supervisor.SupervisorStatusResponse")
	proto.RegisterType((*IDEStatusRequest)(nil), "supervisor.IDEStatusRequest")
	proto.RegisterType((*IDEStatusResponse)(nil), "supervisor.IDEStatusResponse")
	proto.RegisterType((*ContentStatusRequest)(nil), "supervisor.ContentStatusRequest")
	proto.RegisterType((*ContentStatusResponse)(nil), "supervisor.ContentStatusResponse")
	proto.RegisterType((*BackupStatusRequest)(nil), "supervisor.BackupStatusRequest")
	proto.RegisterType((*BackupStatusResponse)(nil), "supervisor.BackupStatusResponse")
	proto.RegisterType((*PortsStatusRequest)(nil), "supervisor.PortsStatusRequest")
	proto.RegisterType((*PortsStatusResponse)(nil), "supervisor.PortsStatusResponse")
	proto.RegisterType((*PortsStatus)(nil), "supervisor.PortsStatus")
	proto.RegisterType((*PortsStatus_ExposedPortInfo)(nil), "supervisor.PortsStatus.ExposedPortInfo")
	proto.RegisterType((*TasksStatusRequest)(nil), "supervisor.TasksStatusRequest")
	proto.RegisterType((*TasksStatusResponse)(nil), "supervisor.TasksStatusResponse")
	proto.RegisterType((*TaskStatus)(nil), "supervisor.TaskStatus")
	proto.RegisterType((*TaskPresentation)(nil), "supervisor.TaskPresentation")
}

func init() {
	proto.RegisterFile("status.proto", fileDescriptor_dfe4fce6682daf5b)
}

var fileDescriptor_dfe4fce6682daf5b = []byte{
	// 971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xae, 0x13, 0xa7, 0x7e, 0x8e, 0x9d, 0xcd, 0x4b, 0xd3, 0x38, 0x26, 0x21, 0xee, 0x06,
	0xa8, 0x1b, 0xc0, 0x26, 0xae, 0x38, 0x20, 0x54, 0x89, 0x34, 0xf4, 0x90, 0x03, 0xa2, 0xda, 0xf4,
	0x14, 0x21, 0x59, 0x63, 0xef, 0xc4, 0x1d, 0x65, 0x3d, 0xb3, 0xcc, 0xee, 0x3a, 0x54, 0x85, 0x0b,
	0xfc, 0x02, 0x84, 0x10, 0x27, 0xce, 0xfc, 0x18, 0x8e, 0xfc, 0x05, 0x7e, 0x01, 0xbf, 0x00, 0xcd,
	0xec, 0xac, 0xbd, 0xeb, 0xd8, 0xa1, 0x5c, 0xa2, 0x79, 0xdf, 0x7c, 0x6f, 0xde, 0x37, 0x6f, 0x9f,
	0xbf, 0x09, 0x6c, 0x44, 0x31, 0x89, 0x93, 0xa8, 0x13, 0x4a, 0x11, 0x0b, 0x84, 0x28, 0x09, 0xa9,
	0x9c, 0xb0, 0x48, 0xc8, 0xe6, 0xfe, 0x48, 0x88, 0x51, 0x40, 0xbb, 0x24, 0x64, 0x5d, 0xc2, 0xb9,
	0x88, 0x49, 0xcc, 0x04, 0x37, 0x4c, 0x77, 0x0f, 0x76, 0x2f, 0xa6, 0xdc, 0x0b, 0x7d, 0x86, 0x47,
	0xbf, 0x4d, 0x68, 0x14, 0xbb, 0xc7, 0xd0, 0xb8, 0xbd, 0x15, 0x85, 0x82, 0x47, 0x14, 0xeb, 0x60,
	0x8b, 0xeb, 0x86, 0xd5, 0xb2, 0xda, 0xf7, 0x3c, 0x5b, 0x5c, 0xbb, 0x1f, 0x80, 0x73, 0xfe, 0xe5,
	0xf3, 0x42, 0x3e, 0x22, 0xac, 0xde, 0x10, 0x16, 0x1b, 0x96, 0x5e, 0xbb, 0x47, 0xb0, 0x95, 0xe3,
	0x2d, 0x39, 0xec, 0x18, 0xee, 0x9f, 0x09, 0x1e, 0x53, 0x1e, 0xff, 0xf7, 0x81, 0xaf, 0x60, 0x67,
	0x8e, 0x6b, 0x0e, 0xdd, 0x87, 0x0a, 0x99, 0x10, 0x16, 0x90, 0x41, 0x40, 0x4d, 0xc6, 0x0c, 0xc0,
	0x13, 0x28, 0x47, 0x22, 0x91, 0x43, 0xda, 0xb0, 0x5b, 0x56, 0xbb, 0xde, 0xdb, 0xeb, 0xcc, 0x3a,
	0xd6, 0xc9, 0x0e, 0xd4, 0x04, 0xcf, 0x10, 0xdd, 0x1d, 0xd8, 0x7e, 0x46, 0x86, 0xd7, 0x49, 0x58,
	0xec, 0xd2, 0x29, 0xdc, 0x2f, 0xc2, 0xa6, 0xfe, 0x63, 0x70, 0x86, 0x84, 0x13, 0xf9, 0xba, 0x3f,
	0x2f, 0x63, 0x33, 0xc5, 0x4f, 0x33, 0xd8, 0xed, 0x00, 0xbe, 0x10, 0x32, 0x8e, 0x8a, 0xb7, 0x6d,
	0xc0, 0xba, 0x18, 0x44, 0x54, 0x4e, 0xb2, 0xbc, 0x2c, 0x74, 0x7f, 0xb6, 0x60, 0xbb, 0x90, 0x60,
	0x4a, 0x7e, 0x0c, 0x6b, 0xc4, 0xf7, 0xa9, 0xdf, 0xb0, 0x5a, 0xa5, 0x76, 0xb5, 0xb7, 0x9b, 0xbf,
	0x53, 0x9e, 0x9f, 0xb2, 0xf0, 0x04, 0xd6, 0x93, 0xd0, 0x27, 0x31, 0xf5, 0x1b, 0xf6, 0xdd, 0x09,
	0x19, 0x4f, 0x69, 0x92, 0x74, 0x2c, 0x26, 0xd4, 0x6f, 0x94, 0x5a, 0xa5, 0x76, 0xcd, 0xcb, 0x42,
	0xf7, 0xf7, 0x12, 0x54, 0x73, 0x29, 0x78, 0x00, 0x10, 0x88, 0x21, 0x09, 0xfa, 0xa1, 0x90, 0xe9,
	0x17, 0xab, 0x79, 0x15, 0x8d, 0x28, 0x16, 0x1e, 0x42, 0x75, 0x14, 0x88, 0x41, 0xb6, 0x6f, 0xeb,
	0x7d, 0x48, 0x21, 0x4d, 0x78, 0x00, 0x65, 0x7d, 0x59, 0xbf, 0xb1, 0xaa, 0x2f, 0x6f, 0x22, 0x3c,
	0x85, 0x75, 0xfa, 0x5d, 0x28, 0x22, 0xea, 0x37, 0xd6, 0x5a, 0x56, 0xbb, 0xda, 0x7b, 0xb4, 0x44,
	0x74, 0xe7, 0x79, 0x4a, 0x53, 0xd0, 0x39, 0xbf, 0x12, 0x5e, 0x96, 0xd7, 0xfc, 0xc7, 0x82, 0xcd,
	0xb9, 0x4d, 0x55, 0x2e, 0x4c, 0x06, 0x01, 0x1b, 0x9a, 0x5e, 0x9b, 0x08, 0x1d, 0x28, 0x25, 0x32,
	0xd0, 0xfa, 0x2a, 0x9e, 0x5a, 0xe2, 0x4b, 0x00, 0xc1, 0xfb, 0x99, 0x86, 0x92, 0x9e, 0x9e, 0x4f,
	0xdf, 0x52, 0x43, 0xe7, 0x6b, 0xae, 0x96, 0x06, 0xf5, 0x2a, 0x82, 0x9b, 0xa5, 0xdb, 0x87, 0x5a,
	0x61, 0x0f, 0x01, 0xca, 0x6c, 0xc4, 0x85, 0xa4, 0xce, 0x0a, 0x3a, 0xb0, 0x21, 0x42, 0xca, 0xfb,
	0x03, 0x29, 0x6e, 0x22, 0x2a, 0x1d, 0x6b, 0x8a, 0x84, 0x92, 0x4e, 0x18, 0xbd, 0x71, 0x6c, 0xc5,
	0xe7, 0x22, 0x66, 0x57, 0xaf, 0x9d, 0x12, 0x22, 0xd4, 0xd3, 0x75, 0x3f, 0x94, 0x6c, 0x42, 0x62,
	0xea, 0xac, 0xaa, 0x19, 0x7b, 0x49, 0xa2, 0xeb, 0xb7, 0x9e, 0xb1, 0x33, 0xd8, 0x2e, 0xf0, 0xcd,
	0x88, 0x7d, 0x04, 0x6b, 0xb1, 0x82, 0xcd, 0x88, 0x3d, 0xc8, 0x5f, 0x5c, 0xf1, 0xb3, 0x09, 0xd3,
	0x24, 0xf7, 0x0f, 0x0b, 0x60, 0x86, 0xaa, 0xdf, 0x39, 0xf3, 0x75, 0xa1, 0x8a, 0x67, 0x33, 0x1f,
	0x3f, 0x84, 0x35, 0xe5, 0x5a, 0xd9, 0x6f, 0x70, 0x67, 0xd1, 0x61, 0xd4, 0x4b, 0x39, 0xd8, 0x84,
	0x7b, 0x31, 0x95, 0x63, 0xc6, 0x49, 0xa0, 0xbb, 0x5e, 0xf1, 0xa6, 0x31, 0x7e, 0x01, 0x1b, 0xa1,
	0xa4, 0x11, 0xe5, 0xa9, 0xb7, 0xe9, 0x91, 0xa9, 0xf6, 0xf6, 0xe7, 0xcf, 0x7b, 0x91, 0xe3, 0x78,
	0x85, 0x0c, 0xf7, 0x1b, 0x70, 0xe6, 0x19, 0xca, 0x6e, 0x38, 0x19, 0x53, 0x23, 0x58, 0xaf, 0x71,
	0x17, 0xd6, 0x75, 0xe3, 0x19, 0x37, 0x33, 0x51, 0x56, 0xe1, 0x39, 0xc7, 0x77, 0xa0, 0xa2, 0x37,
	0xc6, 0xc2, 0xa7, 0x99, 0x3e, 0x05, 0x7c, 0x25, 0x7c, 0x7a, 0x7c, 0x06, 0xb5, 0x82, 0xa7, 0x60,
	0x1d, 0xe0, 0x4a, 0x8a, 0x71, 0x5f, 0xc4, 0xaf, 0xa8, 0x74, 0x56, 0x70, 0x13, 0xaa, 0x3a, 0x1e,
	0x68, 0x27, 0x71, 0x2c, 0xdc, 0x82, 0x9a, 0x06, 0x42, 0x49, 0x07, 0x09, 0x0b, 0x7c, 0xc7, 0x3e,
	0x3e, 0x81, 0xca, 0xb4, 0x29, 0x58, 0x4d, 0x75, 0x30, 0x3e, 0x72, 0x56, 0x54, 0x20, 0x13, 0xae,
	0x03, 0x4b, 0x0d, 0xc2, 0x30, 0x50, 0x23, 0xe4, 0xd8, 0xbd, 0x3f, 0xcb, 0x50, 0x4b, 0x7b, 0x7f,
	0xa1, 0xfa, 0x30, 0xa4, 0xf8, 0x3d, 0x38, 0xf3, 0x9e, 0x8e, 0x47, 0xf9, 0x3e, 0x2d, 0x79, 0x0c,
	0x9a, 0xef, 0xdd, 0x4d, 0x4a, 0xc7, 0xc3, 0x3d, 0xf8, 0xf1, 0xaf, 0xbf, 0x7f, 0xb1, 0x77, 0x71,
	0xa7, 0x3b, 0x39, 0xe9, 0xa6, 0x2f, 0x52, 0x77, 0x96, 0x87, 0x3f, 0x59, 0x50, 0x99, 0xda, 0x3f,
	0x16, 0xbe, 0xcf, 0xfc, 0xeb, 0xd1, 0x3c, 0x58, 0xb2, 0x6b, 0x2a, 0x7d, 0xa6, 0x2b, 0x3d, 0xc1,
	0x7a, 0xae, 0x12, 0xf3, 0xe9, 0xe5, 0x43, 0x3c, 0x2c, 0x22, 0x5d, 0xf5, 0x4c, 0x74, 0xdf, 0xa8,
	0xbf, 0x4f, 0x63, 0x99, 0xd0, 0x1f, 0xf0, 0x37, 0x6b, 0xf6, 0x39, 0x52, 0x25, 0xad, 0x45, 0xee,
	0x5f, 0x50, 0xf3, 0xf0, 0x0e, 0x86, 0x51, 0x74, 0xaa, 0x15, 0x7d, 0x8e, 0x98, 0xab, 0x3f, 0x4c,
	0x99, 0x97, 0xef, 0xe3, 0xd1, 0x6d, 0xf4, 0xb6, 0xb2, 0x00, 0x36, 0xf2, 0x6f, 0x09, 0x1e, 0xe6,
	0xab, 0x2e, 0x78, 0x7c, 0x9a, 0xad, 0xe5, 0x04, 0xa3, 0x6a, 0x4f, 0xab, 0xda, 0xc6, 0xad, 0x5c,
	0xfd, 0x74, 0xca, 0xf0, 0x57, 0xab, 0x68, 0xd9, 0xef, 0x2e, 0xb3, 0x7f, 0x53, 0xec, 0x70, 0xe9,
	0xbe, 0xa9, 0x75, 0xa6, 0x6b, 0x3d, 0x45, 0x27, 0x57, 0x4b, 0xd9, 0x7b, 0x74, 0xf9, 0x18, 0x1f,
	0xcd, 0x63, 0x5d, 0xe3, 0x34, 0xdd, 0x37, 0x66, 0x91, 0xf6, 0xe0, 0x13, 0x4b, 0xeb, 0xca, 0x79,
	0x4f, 0x51, 0xd7, 0x6d, 0x13, 0x2b, 0xea, 0x5a, 0x60, 0x5a, 0x0b, 0x75, 0x69, 0x83, 0xfa, 0x5f,
	0xba, 0x9e, 0xad, 0x5d, 0x96, 0x48, 0xc8, 0x06, 0x65, 0xfd, 0x8f, 0xd3, 0x93, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x5e, 0x32, 0x75, 0xc8, 0x72, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusServiceClient interface {
	// SupervisorStatus returns once supervisor is running.
	SupervisorStatus(ctx context.Context, in *SupervisorStatusRequest, opts ...grpc.CallOption) (*SupervisorStatusResponse, error)
	// IDEStatus returns OK if the IDE can serve requests.
	IDEStatus(ctx context.Context, in *IDEStatusRequest, opts ...grpc.CallOption) (*IDEStatusResponse, error)
	// ContentStatus returns the status of the workspace content. When used with `wait`, the call
	// returns when the content has become available.
	ContentStatus(ctx context.Context, in *ContentStatusRequest, opts ...grpc.CallOption) (*ContentStatusResponse, error)
	// BackupStatus offers feedback on the workspace backup status. This status information can
	// be relayed to the user to provide transparency as to how "safe" their files/content
	// data are w.r.t. to being lost.
	BackupStatus(ctx context.Context, in *BackupStatusRequest, opts ...grpc.CallOption) (*BackupStatusResponse, error)
	// PortsStatus provides feedback about the network ports currently in use.
	PortsStatus(ctx context.Context, in *PortsStatusRequest, opts ...grpc.CallOption) (StatusService_PortsStatusClient, error)
	// TasksStatus provides tasks status information.
	TasksStatus(ctx context.Context, in *TasksStatusRequest, opts ...grpc.CallOption) (StatusService_TasksStatusClient, error)
}

type statusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusServiceClient(cc grpc.ClientConnInterface) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) SupervisorStatus(ctx context.Context, in *SupervisorStatusRequest, opts ...grpc.CallOption) (*SupervisorStatusResponse, error) {
	out := new(SupervisorStatusResponse)
	err := c.cc.Invoke(ctx, "/supervisor.StatusService/SupervisorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) IDEStatus(ctx context.Context, in *IDEStatusRequest, opts ...grpc.CallOption) (*IDEStatusResponse, error) {
	out := new(IDEStatusResponse)
	err := c.cc.Invoke(ctx, "/supervisor.StatusService/IDEStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) ContentStatus(ctx context.Context, in *ContentStatusRequest, opts ...grpc.CallOption) (*ContentStatusResponse, error) {
	out := new(ContentStatusResponse)
	err := c.cc.Invoke(ctx, "/supervisor.StatusService/ContentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) BackupStatus(ctx context.Context, in *BackupStatusRequest, opts ...grpc.CallOption) (*BackupStatusResponse, error) {
	out := new(BackupStatusResponse)
	err := c.cc.Invoke(ctx, "/supervisor.StatusService/BackupStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) PortsStatus(ctx context.Context, in *PortsStatusRequest, opts ...grpc.CallOption) (StatusService_PortsStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StatusService_serviceDesc.Streams[0], "/supervisor.StatusService/PortsStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &statusServicePortsStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatusService_PortsStatusClient interface {
	Recv() (*PortsStatusResponse, error)
	grpc.ClientStream
}

type statusServicePortsStatusClient struct {
	grpc.ClientStream
}

func (x *statusServicePortsStatusClient) Recv() (*PortsStatusResponse, error) {
	m := new(PortsStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statusServiceClient) TasksStatus(ctx context.Context, in *TasksStatusRequest, opts ...grpc.CallOption) (StatusService_TasksStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StatusService_serviceDesc.Streams[1], "/supervisor.StatusService/TasksStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &statusServiceTasksStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatusService_TasksStatusClient interface {
	Recv() (*TasksStatusResponse, error)
	grpc.ClientStream
}

type statusServiceTasksStatusClient struct {
	grpc.ClientStream
}

func (x *statusServiceTasksStatusClient) Recv() (*TasksStatusResponse, error) {
	m := new(TasksStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatusServiceServer is the server API for StatusService service.
type StatusServiceServer interface {
	// SupervisorStatus returns once supervisor is running.
	SupervisorStatus(context.Context, *SupervisorStatusRequest) (*SupervisorStatusResponse, error)
	// IDEStatus returns OK if the IDE can serve requests.
	IDEStatus(context.Context, *IDEStatusRequest) (*IDEStatusResponse, error)
	// ContentStatus returns the status of the workspace content. When used with `wait`, the call
	// returns when the content has become available.
	ContentStatus(context.Context, *ContentStatusRequest) (*ContentStatusResponse, error)
	// BackupStatus offers feedback on the workspace backup status. This status information can
	// be relayed to the user to provide transparency as to how "safe" their files/content
	// data are w.r.t. to being lost.
	BackupStatus(context.Context, *BackupStatusRequest) (*BackupStatusResponse, error)
	// PortsStatus provides feedback about the network ports currently in use.
	PortsStatus(*PortsStatusRequest, StatusService_PortsStatusServer) error
	// TasksStatus provides tasks status information.
	TasksStatus(*TasksStatusRequest, StatusService_TasksStatusServer) error
}

// UnimplementedStatusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServiceServer struct {
}

func (*UnimplementedStatusServiceServer) SupervisorStatus(ctx context.Context, req *SupervisorStatusRequest) (*SupervisorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupervisorStatus not implemented")
}
func (*UnimplementedStatusServiceServer) IDEStatus(ctx context.Context, req *IDEStatusRequest) (*IDEStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDEStatus not implemented")
}
func (*UnimplementedStatusServiceServer) ContentStatus(ctx context.Context, req *ContentStatusRequest) (*ContentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContentStatus not implemented")
}
func (*UnimplementedStatusServiceServer) BackupStatus(ctx context.Context, req *BackupStatusRequest) (*BackupStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupStatus not implemented")
}
func (*UnimplementedStatusServiceServer) PortsStatus(req *PortsStatusRequest, srv StatusService_PortsStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method PortsStatus not implemented")
}
func (*UnimplementedStatusServiceServer) TasksStatus(req *TasksStatusRequest, srv StatusService_TasksStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method TasksStatus not implemented")
}

func RegisterStatusServiceServer(s *grpc.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_SupervisorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupervisorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).SupervisorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.StatusService/SupervisorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).SupervisorStatus(ctx, req.(*SupervisorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_IDEStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDEStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).IDEStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.StatusService/IDEStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).IDEStatus(ctx, req.(*IDEStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_ContentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).ContentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.StatusService/ContentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).ContentStatus(ctx, req.(*ContentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_BackupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).BackupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.StatusService/BackupStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).BackupStatus(ctx, req.(*BackupStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_PortsStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortsStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusServiceServer).PortsStatus(m, &statusServicePortsStatusServer{stream})
}

type StatusService_PortsStatusServer interface {
	Send(*PortsStatusResponse) error
	grpc.ServerStream
}

type statusServicePortsStatusServer struct {
	grpc.ServerStream
}

func (x *statusServicePortsStatusServer) Send(m *PortsStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatusService_TasksStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TasksStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusServiceServer).TasksStatus(m, &statusServiceTasksStatusServer{stream})
}

type StatusService_TasksStatusServer interface {
	Send(*TasksStatusResponse) error
	grpc.ServerStream
}

type statusServiceTasksStatusServer struct {
	grpc.ServerStream
}

func (x *statusServiceTasksStatusServer) Send(m *TasksStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _StatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supervisor.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupervisorStatus",
			Handler:    _StatusService_SupervisorStatus_Handler,
		},
		{
			MethodName: "IDEStatus",
			Handler:    _StatusService_IDEStatus_Handler,
		},
		{
			MethodName: "ContentStatus",
			Handler:    _StatusService_ContentStatus_Handler,
		},
		{
			MethodName: "BackupStatus",
			Handler:    _StatusService_BackupStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PortsStatus",
			Handler:       _StatusService_PortsStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TasksStatus",
			Handler:       _StatusService_TasksStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "status.proto",
}
